import streamlit as st
import uuid
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime, timedelta
import os

# ====== C·∫§U H√åNH ·ª®NG D·ª§NG ======
st.set_page_config(
    page_title="H·ªá Th·ªëng Qu·∫£n L√Ω Kinh Doanh",
    page_icon="üìä",
    layout="wide"
)

# ====== T·∫†O D·ªÆ LI·ªÜU GI·∫¢ L·∫¨P ONLINE ======
def generate_mock_online_orders(num_orders=100):
    platforms = ['Shopee', 'Lazada', 'Tiki', 'Sendo']
    products = ['√Åo thun', 'Qu·∫ßn jeans', 'Gi√†y sneaker', 'T√∫i x√°ch', 'ƒê·ªìng h·ªì', 'K√≠nh m√°t']
    payment_methods = ['MoMo', 'ZaloPay', 'Th·∫ª ng√¢n h√†ng', 'COD']
    
    start_date = datetime.now() - timedelta(days=60)
    orders = []
    
    for i in range(num_orders):
        order_date = start_date + timedelta(days=np.random.randint(0, 60))
        platform = np.random.choice(platforms)
        product = np.random.choice(products)
        quantity = np.random.randint(1, 5)
        price = np.random.choice([150000, 250000, 350000, 500000])
        shipping_fee = 20000 if price > 300000 else 30000
        platform_fee = price * 0.05
        
        orders.append({
            'order_id': f'ONLINE-{1000 + i}',
            'order_date': order_date,
            'platform': platform,
            'product': product,
            'quantity': quantity,
            'price': price,
            'shipping_fee': shipping_fee,
            'platform_fee': platform_fee,
            'payment_method': np.random.choice(payment_methods),
            'status': np.random.choice(['ƒê√£ giao', 'ƒêang giao', 'H·ªßy'], p=[0.85, 0.1, 0.05]),
            'customer_id': f'CUST{np.random.randint(100, 500)}',
            'loai': 'Online'
        })
    
    return pd.DataFrame(orders)

# ====== QU·∫¢N L√ù D·ªÆ LI·ªÜU OFFLINE ======
def init_offline_data():
    """Kh·ªüi t·∫°o d·ªØ li·ªáu offline n·∫øu ch∆∞a c√≥"""
    if 'offline_transactions' not in st.session_state:
        st.session_state.offline_transactions = pd.DataFrame(columns=[
            'transaction_id', 'date', 'product', 'quantity', 
            'unit_price', 'total', 'payment_method', 'notes', 'loai'
        ])
    
    if 'offline_inventory' not in st.session_state:
        st.session_state.offline_inventory = {
            '√Åo thun': 50,
            'Qu·∫ßn jeans': 40,
            'Gi√†y sneaker': 30,
            'T√∫i x√°ch': 25,
            'ƒê·ªìng h·ªì': 20,
            'K√≠nh m√°t': 15
        }

def save_offline_transaction(date, product, quantity, unit_price, payment_method, notes):
    """L∆∞u giao d·ªãch offline m·ªõi"""
    transaction_id = f"OFFLINE-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    total = quantity * unit_price
    
    new_transaction = pd.DataFrame([{
        'transaction_id': transaction_id,
        'date': date,
        'product': product,
        'quantity': quantity,
        'unit_price': unit_price,
        'total': total,
        'payment_method': payment_method,
        'notes': notes,
        'loai': 'Offline'
    }])
    
    # C·∫≠p nh·∫≠t t·ªìn kho offline
    if product in st.session_state.offline_inventory:
        st.session_state.offline_inventory[product] -= quantity
    
    # Th√™m v√†o l·ªãch s·ª≠ giao d·ªãch
    st.session_state.offline_transactions = pd.concat(
        [st.session_state.offline_transactions, new_transaction], 
        ignore_index=True
    )
    
    return new_transaction

# ====== PH√ÇN T√çCH D·ªÆ LI·ªÜU T·ªîNG H·ª¢P ======
def analyze_combined_data(online_df, offline_df):
    """Ph√¢n t√≠ch d·ªØ li·ªáu k·∫øt h·ª£p online + offline"""
    # K·∫øt h·ª£p d·ªØ li·ªáu
    combined_df = pd.concat([online_df, offline_df], ignore_index=True)
    
    if combined_df.empty:
        return combined_df, {}
    
    # T√≠nh to√°n ch·ªâ s·ªë
    completed_df = combined_df[combined_df['status'] != 'H·ªßy'] if 'status' in combined_df.columns else combined_df
    
    if not completed_df.empty:
        # T√≠nh doanh thu
        completed_df['revenue'] = completed_df.apply(
            lambda row: row['total'] if 'total' in row else (row['price'] * row['quantity']), 
            axis=1
        )
        
        # T√≠nh l·ª£i nhu·∫≠n (gi·∫£ ƒë·ªãnh l·ª£i nhu·∫≠n 40% cho offline)
        completed_df['profit'] = completed_df.apply(
            lambda row: row['revenue'] * 0.4 if row['loai'] == 'Offline' 
            else (row['revenue'] - row.get('shipping_fee', 0) - row.get('platform_fee', 0)),
            axis=1
        )
    
    # Ph√¢n t√≠ch
    analysis = {
        'daily_revenue': completed_df.groupby('date')['revenue'].sum(),
        'top_products': completed_df.groupby('product')['quantity'].sum().astype(float).nlargest(5),
        'revenue_by_type': completed_df.groupby('loai')['revenue'].sum(),
        'payment_analysis': completed_df.groupby('payment_method')['revenue'].sum()
    }
    
    return completed_df, analysis

# ====== GIAO DI·ªÜN STREAMLIT ======
def main():
    st.title("üìä H·ªá Th·ªëng Qu·∫£n L√Ω Kinh Doanh Online + Offline")
    
    # Kh·ªüi t·∫°o d·ªØ li·ªáu
    init_offline_data()
    
    if 'online_orders' not in st.session_state:
        st.session_state.online_orders = generate_mock_online_orders(100)
        st.session_state.combined_df, st.session_state.analysis = analyze_combined_data(
            st.session_state.online_orders,
            st.session_state.offline_transactions
        )
    
    # Sidebar ƒëi·ªÅu khi·ªÉn
    with st.sidebar:
        st.header("‚öôÔ∏è ƒêi·ªÅu khi·ªÉn h·ªá th·ªëng")
        
        if st.button("üîÑ T·∫°o d·ªØ li·ªáu online m·ªõi"):
            st.session_state.online_orders = generate_mock_online_orders(100)
            st.session_state.combined_df, st.session_state.analysis = analyze_combined_data(
                st.session_state.online_orders,
                st.session_state.offline_transactions
            )
            st.success("D·ªØ li·ªáu online ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!")
        
        st.divider()
        st.subheader("T√πy ch·ªçn hi·ªÉn th·ªã")
        show_raw_data = st.checkbox("Hi·ªÉn th·ªã d·ªØ li·ªáu th√¥", False)
    
    # ====== TAB CH√çNH ======
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä T·ªïng quan", "üõí Kinh doanh Online", "üè™ Kinh doanh Offline", 
        "üìà B√°o c√°o", "üì¶ Kho h√†ng", "‚ûï Nh·∫≠p kho"
    ])

    # Tab 5: Kho h√†ng
    with tab5:
        st.subheader("üì¶ Th·ªëng k√™ Kho h√†ng")

        if 'warehouse_data' not in st.session_state:
            st.session_state.warehouse_data = pd.DataFrame(columns=[
                'Lo·∫°i s·∫£n ph·∫©m', 'M√£ s·∫£n ph·∫©m', 'T√™n s·∫£n ph·∫©m',
                'S·ªë l∆∞·ª£ng t·ªìn', 'ƒê√£ v·∫≠n chuy·ªÉn', 'Gi√° nh·∫≠p', 'Gi√° b√°n',
                'T·ªïng gi√° nh·∫≠p', 'T·ªïng gi√° b√°n', 'Ng√†y c·∫≠p nh·∫≠t'
            ])

        df = st.session_state.warehouse_data.copy()
        if not df.empty:
            # T√≠nh to√°n c√°c gi√° tr·ªã t·ªïng
            df['T·ªïng gi√° nh·∫≠p'] = df['S·ªë l∆∞·ª£ng t·ªìn'] * df['Gi√° nh·∫≠p']
            df['T·ªïng gi√° b√°n'] = df['S·ªë l∆∞·ª£ng t·ªìn'] * df['Gi√° b√°n']

            # Hi·ªÉn th·ªã d·ªØ li·ªáu kho h√†ng
            st.dataframe(df, use_container_width=True)
            
            # Bi·ªÉu ƒë·ªì th·ªëng k√™ h√†ng t·ªìn theo ng√†y
            st.markdown("### üìä Bi·ªÉu ƒë·ªì th·ªëng k√™ h√†ng t·ªìn theo ng√†y")
            if 'Ng√†y c·∫≠p nh·∫≠t' in df.columns:
                df['Ng√†y c·∫≠p nh·∫≠t'] = pd.to_datetime(df['Ng√†y c·∫≠p nh·∫≠t'])
                df_date = df.groupby(df['Ng√†y c·∫≠p nh·∫≠t'].dt.date)['S·ªë l∆∞·ª£ng t·ªìn'].sum().reset_index()
                
                fig = px.line(
                    df_date, 
                    x='Ng√†y c·∫≠p nh·∫≠t', 
                    y='S·ªë l∆∞·ª£ng t·ªìn',
                    title='Bi·∫øn ƒë·ªông h√†ng t·ªìn kho theo ng√†y',
                    markers=True
                )
                fig.update_layout(
                    xaxis_title='Ng√†y',
                    yaxis_title='S·ªë l∆∞·ª£ng t·ªìn kho',
                    hovermode='x unified'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            # T·ªïng k·∫øt kho h√†ng
            st.markdown("### üìä T·ªïng k·∫øt kho h√†ng")
            total_import_value = df['T·ªïng gi√° nh·∫≠p'].sum()
            total_sale_value = df['T·ªïng gi√° b√°n'].sum()
            total_stock = df['S·ªë l∆∞·ª£ng t·ªìn'].sum()

            col1, col2, col3 = st.columns(3)
            col1.metric("T·ªïng gi√° tr·ªã nh·∫≠p kho", f"{total_import_value:,.0f} VND")
            col2.metric("T·ªïng gi√° tr·ªã b√°n d·ª± ki·∫øn", f"{total_sale_value:,.0f} VND")
            col3.metric("T·ªïng s·ªë l∆∞·ª£ng t·ªìn", total_stock)

        st.divider()
        st.markdown("### üõ†Ô∏è ƒêi·ªÅu ch·ªânh th√¥ng tin t·ªìn kho")

        with st.expander("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin kho", expanded=False):
            code_input = st.text_input("üîê Nh·∫≠p m√£ ƒë·ªÉ ch·ªânh s·ª≠a kho:", type="password", key="edit_code_kho_section_1_1")
            if code_input == "072025":
                product_list = st.session_state.warehouse_data['M√£ s·∫£n ph·∫©m'].unique().tolist()
                selected_code = st.selectbox("Ch·ªçn m√£ s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a", product_list)
                matched_rows = st.session_state.warehouse_data[st.session_state.warehouse_data['M√£ s·∫£n ph·∫©m'] == selected_code]
                if not matched_rows.empty:
                    row = matched_rows.iloc[0]
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi m√£ ƒë√£ ch·ªçn.")
                    return

                cols = st.columns(3)
                current_qty = row['S·ªë l∆∞·ª£ng t·ªìn']
                current_import_price = row['Gi√° nh·∫≠p']
                current_sale_price = row['Gi√° b√°n']
                
                new_qty = cols[0].number_input("S·ªë l∆∞·ª£ng m·ªõi", value=int(current_qty), step=1)
                new_import_price = cols[1].number_input("Gi√° nh·∫≠p m·ªõi (VND)", value=int(current_import_price), step=1000)
                new_sale_price = cols[2].number_input("Gi√° b√°n m·ªõi (VND)", value=int(current_sale_price), step=1000)

                if st.button("üíæ C·∫≠p nh·∫≠t th√¥ng tin", key="update_qty_btn"):
                    idx = st.session_state.warehouse_data[
                        st.session_state.warehouse_data['M√£ s·∫£n ph·∫©m'] == selected_code
                    ].index[0]
                    
                    st.session_state.warehouse_data.at[idx, 'S·ªë l∆∞·ª£ng t·ªìn'] = new_qty
                    st.session_state.warehouse_data.at[idx, 'Gi√° nh·∫≠p'] = new_import_price
                    st.session_state.warehouse_data.at[idx, 'Gi√° b√°n'] = new_sale_price
                    st.session_state.warehouse_data.at[idx, 'T·ªïng gi√° nh·∫≠p'] = new_qty * new_import_price
                    st.session_state.warehouse_data.at[idx, 'T·ªïng gi√° b√°n'] = new_qty * new_sale_price
                    st.session_state.warehouse_data.at[idx, 'Ng√†y c·∫≠p nh·∫≠t'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                    # L∆∞u l·ªãch s·ª≠ ch·ªânh s·ª≠a
                    if "adjustment_history" not in st.session_state:
                        st.session_state.adjustment_history = []

                    st.session_state.adjustment_history.append({
                        "Th·ªùi gian": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "M√£ s·∫£n ph·∫©m": selected_code,
                        "T√™n s·∫£n ph·∫©m": row['T√™n s·∫£n ph·∫©m'],
                        "S·ªë l∆∞·ª£ng c≈©": current_qty,
                        "S·ªë l∆∞·ª£ng m·ªõi": new_qty,
                        "Gi√° nh·∫≠p c≈©": current_import_price,
                        "Gi√° nh·∫≠p m·ªõi": new_import_price,
                        "Gi√° b√°n c≈©": current_sale_price,
                        "Gi√° b√°n m·ªõi": new_sale_price
                    })

                    st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin kho!")

            if code_input != "" and code_input != "072025":
                st.error("‚ùå M√£ ch·ªânh s·ª≠a kh√¥ng ƒë√∫ng.")

        with st.expander("üìú Xem l·ªãch s·ª≠ ch·ªânh s·ª≠a kho", expanded=False):
            view_code = st.text_input("üîê Nh·∫≠p m√£ ƒë·ªÉ xem l·ªãch s·ª≠:", type="password", key="view_code_kho_section_1_1")
            if view_code == "082025":
                if "adjustment_history" in st.session_state and st.session_state.adjustment_history:
                    st.dataframe(pd.DataFrame(st.session_state.adjustment_history))
                else:
                    st.info("üì≠ Ch∆∞a c√≥ ch·ªânh s·ª≠a n√†o ƒë∆∞·ª£c ghi nh·∫≠n.")
            elif view_code != "":
                st.error("‚ùå M√£ xem l·ªãch s·ª≠ kh√¥ng ƒë√∫ng.")

        if not df.empty:
            st.divider()
            st.markdown("### üìä T·ªïng k·∫øt kho h√†ng")
            col1, col2, col3 = st.columns(3)
            col1.metric("T·ªïng gi√° tr·ªã nh·∫≠p kho", f"{total_import_value:,.0f} VND")
            col2.metric("T·ªïng gi√° tr·ªã b√°n d·ª± ki·∫øn", f"{total_sale_value:,.0f} VND")
            col3.metric("T·ªïng s·ªë l∆∞·ª£ng t·ªìn", total_stock)
        else:
            st.info("üì≠ Kho h√†ng ƒëang tr·ªëng.")

    # Tab 6: Nh·∫≠p kho
    with tab6:
        st.subheader("‚ûï T·∫°o ƒë∆°n nh·∫≠p kho")

        # Kh·ªüi t·∫°o danh s√°ch ƒë∆°n h√†ng n·∫øu ch∆∞a c√≥
        if 'import_orders' not in st.session_state:
            st.session_state.import_orders = []
        if 'pending_import_orders' not in st.session_state:
            st.session_state.pending_import_orders = []

        # N√∫t t·∫°o ƒë∆°n h√†ng m·ªõi
        if st.button("‚ûï T·∫°o ƒë∆°n h√†ng m·ªõi"):
            st.session_state.import_orders.append({
                'Lo·∫°i s·∫£n ph·∫©m': '',
                'M√£ s·∫£n ph·∫©m': '',
                'T√™n s·∫£n ph·∫©m': '',
                'S·ªë l∆∞·ª£ng d·ª± ki·∫øn': 0,
                'Gi√° nh·∫≠p': 0,
                'Gi√° b√°n d·ª± ki·∫øn': 0,
                'Ngu·ªìn h√†ng': '',
                'Link ngu·ªìn': '',
                'Th·ªèa thu·∫≠n': None,
                'H√≥a ƒë∆°n': None,
                'ƒê√£ nh·∫≠p kho': False,
                'Ng√†y t·∫°o': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })

        # Hi·ªÉn th·ªã c√°c ƒë∆°n h√†ng ch∆∞a nh·∫≠p kho (pending + ch∆∞a ƒë√°nh d·∫•u)
        st.markdown("### üìã Danh s√°ch ƒë∆°n h√†ng ch·ªù nh·∫≠p kho")
        combined_pending = st.session_state.import_orders + st.session_state.pending_import_orders
        combined_pending = [o for o in combined_pending if not o.get('ƒê√£ nh·∫≠p kho', False)]
        
        if combined_pending:
            df_pending = pd.DataFrame(combined_pending)
            total_orders = len(df_pending)
            total_qty = df_pending['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'].sum()
            total_import_value = (df_pending['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'] * df_pending['Gi√° nh·∫≠p']).sum()

            st.markdown("### üìã Danh s√°ch ƒë∆°n h√†ng ch·ªù nh·∫≠p kho")
            df_display = pd.DataFrame(combined_pending)
            columns_to_show = [col for col in ['M√£ ƒë∆°n h√†ng', 'T√™n s·∫£n ph·∫©m', 'S·ªë l∆∞·ª£ng d·ª± ki·∫øn', 'Gi√° nh·∫≠p', 'Gi√° b√°n d·ª± ki·∫øn', 'Ng√†y t·∫°o', 'ƒê√£ nh·∫≠p kho'] if col in df_display.columns]
            st.dataframe(df_display[columns_to_show])

            st.markdown("### üìä Th·ªëng k√™ ƒë∆°n h√†ng ch·ªù nh·∫≠p kho")
            col1, col2, col3 = st.columns(3)
            col1.metric("S·ªë ƒë∆°n h√†ng", total_orders)
            col2.metric("T·ªïng s·ªë l∆∞·ª£ng", total_qty)
            col3.metric("T·ªïng gi√° tr·ªã nh·∫≠p d·ª± ki·∫øn", f"{total_import_value:,.0f} VND")
        else:
            st.info("Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒëang ch·ªù nh·∫≠p kho.")

        # Hi·ªÉn th·ªã v√† qu·∫£n l√Ω t·ª´ng ƒë∆°n h√†ng
        for i, order in enumerate(st.session_state.import_orders):
            with st.expander(f"üì¶ ƒê∆°n h√†ng #{i+1} - {order['T√™n s·∫£n ph·∫©m']}", expanded=not order['ƒê√£ nh·∫≠p kho']):
                # Th√¥ng tin c∆° b·∫£n
                cols = st.columns(3)
                order['Lo·∫°i s·∫£n ph·∫©m'] = cols[0].text_input("Lo·∫°i s·∫£n ph·∫©m", value=order['Lo·∫°i s·∫£n ph·∫©m'], key=f"loai_{i}")
                order['M√£ s·∫£n ph·∫©m'] = cols[1].text_input("M√£ s·∫£n ph·∫©m", value=order['M√£ s·∫£n ph·∫©m'], key=f"ma_{i}")
                order['T√™n s·∫£n ph·∫©m'] = cols[2].text_input("T√™n s·∫£n ph·∫©m", value=order['T√™n s·∫£n ph·∫©m'], key=f"ten_{i}")

                # S·ªë l∆∞·ª£ng v√† gi√° c·∫£
                cols2 = st.columns(3)
                order['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'] = cols2[0].number_input("S·ªë l∆∞·ª£ng", 
                                                               value=order['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'], 
                                                               min_value=0, 
                                                               step=1, 
                                                               key=f"soluong_{i}")
                order['Gi√° nh·∫≠p'] = cols2[1].number_input("Gi√° nh·∫≠p (VND)", 
                                                       value=order['Gi√° nh·∫≠p'], 
                                                       min_value=0, 
                                                       step=1000, 
                                                       key=f"gianhap_{i}")
                order['Gi√° b√°n d·ª± ki·∫øn'] = cols2[2].number_input("Gi√° b√°n d·ª± ki·∫øn (VND)", 
                                                              value=order['Gi√° b√°n d·ª± ki·∫øn'], 
                                                              min_value=0, 
                                                              step=1000, 
                                                              key=f"giaban_{i}")

                # Th√¥ng tin ngu·ªìn h√†ng
                cols3 = st.columns(2)
                order['Ngu·ªìn h√†ng'] = cols3[0].text_input("Ngu·ªìn h√†ng", value=order['Ngu·ªìn h√†ng'], key=f"nguon_{i}")
                order['Link ngu·ªìn'] = cols3[1].text_input("Link ngu·ªìn", value=order['Link ngu·ªìn'], key=f"link_{i}")

                # T·ªáp ƒë√≠nh k√®m
                order['Th·ªèa thu·∫≠n'] = st.file_uploader("üìÑ ƒê√≠nh k√®m th·ªèa thu·∫≠n", key=f"thoa_{i}")
                order['H√≥a ƒë∆°n'] = st.file_uploader("üßæ ƒê√≠nh k√®m h√≥a ƒë∆°n", key=f"hd_{i}")

                # Tr·∫°ng th√°i nh·∫≠p kho
                order['ƒê√£ nh·∫≠p kho'] = st.checkbox("‚úÖ ƒê√°nh d·∫•u ƒë√£ nh·∫≠p kho", 
                                                value=order['ƒê√£ nh·∫≠p kho'], 
                                                key=f"check_{i}")

                # N√∫t l∆∞u ƒë∆°n h√†ng
                if st.button(f"üíæ L∆∞u ƒë∆°n h√†ng #{i+1}", key=f"save_{i}"):
                    if order['ƒê√£ nh·∫≠p kho']:
                        if 'warehouse_data' not in st.session_state:
                            st.session_state.warehouse_data = pd.DataFrame(columns=[
                                'Lo·∫°i s·∫£n ph·∫©m', 'M√£ s·∫£n ph·∫©m', 'T√™n s·∫£n ph·∫©m',
                                'S·ªë l∆∞·ª£ng t·ªìn', 'ƒê√£ v·∫≠n chuy·ªÉn', 'Gi√° nh·∫≠p', 'Gi√° b√°n',
                                'T·ªïng gi√° nh·∫≠p', 'T·ªïng gi√° b√°n', 'Ng√†y c·∫≠p nh·∫≠t'
                            ])

                        df_kho = st.session_state.warehouse_data
                        if order['M√£ s·∫£n ph·∫©m'] in df_kho['M√£ s·∫£n ph·∫©m'].values:
                            idx = df_kho[df_kho['M√£ s·∫£n ph·∫©m'] == order['M√£ s·∫£n ph·∫©m']].index[0]
                            df_kho.at[idx, 'S·ªë l∆∞·ª£ng t·ªìn'] += order['S·ªë l∆∞·ª£ng d·ª± ki·∫øn']
                            df_kho.at[idx, 'Gi√° nh·∫≠p'] = order['Gi√° nh·∫≠p']
                            df_kho.at[idx, 'Gi√° b√°n'] = order['Gi√° b√°n d·ª± ki·∫øn']
                            df_kho.at[idx, 'T·ªïng gi√° nh·∫≠p'] = df_kho.at[idx, 'S·ªë l∆∞·ª£ng t·ªìn'] * df_kho.at[idx, 'Gi√° nh·∫≠p']
                            df_kho.at[idx, 'T·ªïng gi√° b√°n'] = df_kho.at[idx, 'S·ªë l∆∞·ª£ng t·ªìn'] * df_kho.at[idx, 'Gi√° b√°n']
                            df_kho.at[idx, 'Ng√†y c·∫≠p nh·∫≠t'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            st.success(f"C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng kho cho '{order['T√™n s·∫£n ph·∫©m']}'")
                        else:
                            new_row = {
                                'Lo·∫°i s·∫£n ph·∫©m': order['Lo·∫°i s·∫£n ph·∫©m'],
                                'M√£ s·∫£n ph·∫©m': order['M√£ s·∫£n ph·∫©m'],
                                'T√™n s·∫£n ph·∫©m': order['T√™n s·∫£n ph·∫©m'],
                                'S·ªë l∆∞·ª£ng t·ªìn': order['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'],
                                'ƒê√£ v·∫≠n chuy·ªÉn': 0,
                                'Gi√° nh·∫≠p': order['Gi√° nh·∫≠p'],
                                'Gi√° b√°n': order['Gi√° b√°n d·ª± ki·∫øn'],
                                'T·ªïng gi√° nh·∫≠p': order['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'] * order['Gi√° nh·∫≠p'],
                                'T·ªïng gi√° b√°n': order['S·ªë l∆∞·ª£ng d·ª± ki·∫øn'] * order['Gi√° b√°n d·ª± ki·∫øn'],
                                'Ng√†y c·∫≠p nh·∫≠t': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            }
                            st.session_state.warehouse_data = pd.concat(
                                [st.session_state.warehouse_data, pd.DataFrame([new_row])],
                                ignore_index=True
                            )
                            st.success(f"‚úÖ S·∫£n ph·∫©m '{order['T√™n s·∫£n ph·∫©m']}' ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho h√†ng!")

                        if order in st.session_state.import_orders:
                            st.session_state.import_orders.remove(order)
                    else:
                        st.success(f"üì¶ ƒê∆°n h√†ng #{i+1} ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°m. Ch∆∞a nh·∫≠p kho.")
    
    # C√°c tab kh√°c gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc...
    # Tab 1: T·ªïng quan
    with tab1:
        st.subheader("üìà T·ªïng quan kinh doanh")
        
        if st.session_state.combined_df.empty:
            st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu kinh doanh")
            total_revenue = 0
            total_profit = 0
            online_revenue = 0
            offline_revenue = 0
        else:
            total_revenue = st.session_state.combined_df['revenue'].sum()
            total_profit = st.session_state.combined_df['profit'].sum()

            # T√≠nh doanh thu theo lo·∫°i
            revenue_by_type = st.session_state.combined_df.groupby('loai')['revenue'].sum()
            online_revenue = revenue_by_type.get('Online', 0)
            offline_revenue = revenue_by_type.get('Offline', 0)

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("T·ªïng doanh thu", f"{total_revenue:,.0f} VND")
        col2.metric("T·ªïng l·ª£i nhu·∫≠n", f"{total_profit:,.0f} VND")
        col3.metric("Doanh thu Online", f"{online_revenue:,.0f} VND")
        col4.metric("Doanh thu Offline", f"{offline_revenue:,.0f} VND")
        
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªï doanh thu
        if total_revenue > 0:
            fig_revenue_dist = px.pie(
                names=['Online', 'Offline'],
                values=[online_revenue, offline_revenue],
                title='T·ª∑ l·ªá doanh thu Online vs Offline'
            )
            st.plotly_chart(fig_revenue_dist, use_container_width=True)
    
    # Tab 2: Kinh doanh Online
    with tab2:
        st.subheader("üõí Kinh doanh Online")
        
        if st.session_state.online_orders.empty:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu kinh doanh online")
        else:
            st.dataframe(st.session_state.online_orders)
    
    # Tab 3: Kinh doanh Offline
    with tab3:
        st.subheader("üè™ Nh·∫≠p li·ªáu kinh doanh Offline")
        
        with st.form("offline_form", clear_on_submit=True):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                date = st.date_input("Ng√†y giao d·ªãch", datetime.today())
                product = st.selectbox(
                    "S·∫£n ph·∫©m", 
                    options=list(st.session_state.offline_inventory.keys())
                )
                quantity = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=1)
                
                # Hi·ªÉn th·ªã t·ªìn kho
                if product in st.session_state.offline_inventory:
                    st.info(f"T·ªìn kho hi·ªán t·∫°i: {st.session_state.offline_inventory[product]} {product}")
            
            with col2:
                unit_price = st.number_input("ƒê∆°n gi√° (VND)", min_value=0, value=0)
                payment_method = st.selectbox(
                    "Ph∆∞∆°ng th·ª©c thanh to√°n", 
                    options=["Ti·ªÅn m·∫∑t", "Chuy·ªÉn kho·∫£n", "Th·∫ª", "QR Code"]
                )
                notes = st.text_area("Ghi ch√∫")
                
                # T√≠nh to√°n t·ª± ƒë·ªông
                if unit_price > 0 and quantity > 0:
                    total = unit_price * quantity
                    st.metric("T·ªïng ti·ªÅn", f"{total:,.0f} VND")
            
            submitted = st.form_submit_button("üíæ L∆∞u giao d·ªãch")
            
            if submitted:
                if product in st.session_state.offline_inventory:
                    if quantity > st.session_state.offline_inventory[product]:
                        st.error("‚ö†Ô∏è S·ªë l∆∞·ª£ng b√°n v∆∞·ª£t qu√° t·ªìn kho!")
                    else:
                        new_trans = save_offline_transaction(
                            date, product, quantity, unit_price, payment_method, notes
                        )
                        st.session_state.combined_df, st.session_state.analysis = analyze_combined_data(
                            st.session_state.online_orders,
                            st.session_state.offline_transactions
                        )
                        st.success("‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                else:
                    st.error("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong kho!")
        
        st.divider()
        st.subheader("üìã L·ªãch s·ª≠ giao d·ªãch Offline")
        
        if not st.session_state.offline_transactions.empty:
            st.dataframe(st.session_state.offline_transactions)
        else:
            st.info("Ch∆∞a c√≥ giao d·ªãch offline n√†o")
    
    # Tab 4: B√°o c√°o t·ªïng h·ª£p
    with tab4:
        st.subheader("üìà B√°o c√°o t·ªïng h·ª£p Online + Offline")
        
        if st.session_state.combined_df.empty:
            st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ b√°o c√°o")
        else:
            # B√°o c√°o doanh thu theo ng√†y
            if 'daily_revenue' in st.session_state.analysis and not st.session_state.analysis['daily_revenue'].empty:
                fig_daily = px.line(
                    st.session_state.analysis['daily_revenue'].reset_index(),
                    x='date', y='revenue',
                    title='Doanh thu theo ng√†y',
                    labels={'date': 'Ng√†y', 'revenue': 'Doanh thu (VND)'}
                )
                st.plotly_chart(fig_daily, use_container_width=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Top s·∫£n ph·∫©m
                if 'top_products' in st.session_state.analysis and not st.session_state.analysis['top_products'].empty:
                    fig_products = px.bar(
                        st.session_state.analysis['top_products'].reset_index(),
                        x='product', y='quantity',
                        title='Top s·∫£n ph·∫©m b√°n ch·∫°y'
                    )
                    st.plotly_chart(fig_products, use_container_width=True)
            
            with col2:
                # Ph√¢n b·ªï doanh thu
                if 'revenue_by_type' in st.session_state.analysis and not st.session_state.analysis['revenue_by_type'].empty:
                    fig_revenue = px.pie(
                        st.session_state.analysis['revenue_by_type'].reset_index(),
                        names='loai', values='revenue',
                        title='Ph√¢n b·ªï doanh thu theo k√™nh'
                    )
                    st.plotly_chart(fig_revenue, use_container_width=True)
    
    # ====== HI·ªÇN TH·ªä D·ªÆ LI·ªÜU TH√î ======
    if show_raw_data:
        st.subheader("üìÑ D·ªØ li·ªáu th√¥ t·ªïng h·ª£p")
        if not st.session_state.combined_df.empty:
            st.dataframe(st.session_state.combined_df)
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu")

# ====== CH·∫†Y ·ª®NG D·ª§NG ======
if __name__ == "__main__":
    main()